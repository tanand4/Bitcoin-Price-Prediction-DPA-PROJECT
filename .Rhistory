print(data[33396,])
print(length(closingFigures))
print(data)
data <- read.csv("data_hourly.csv", header = TRUE)
data <- read.csv("data_hourly.csv", header = TRUE)
head(data)
summary(data)
data <- na.omit(data)
# Converting data for analysis
#fixing the format for timestamp
library("lubridate")
#timestamp <- 2012368256
#timestamp <- 1569225600000 /1000
#datetime <- as_datetime(timestamp)
#print ("DateTime Notation")
#print (datetime)
data$timestamp <- as.numeric(data$timestamp )/1000
data$timestamp <- as_datetime(data$timestamp)
data <- data[order(data$timestamp), ]
head(data,15)
# Create the basic ggplot object
cp <- ggplot(data, aes(timestamp, close)) +
geom_line(size = 1, colour = "red") +
scale_x_datetime(date_breaks = "years", date_labels = "%Y", limits = as.POSIXct(c("2019-01-01", "2023-12-01"))) +
ylab("Closing Price ($)") +
xlab("Year") +
ylim(0, 75000) +
labs(title = "     Bitcoin Closing Price")
# Centre the title
cp <- cp + theme(plot.title = element_text(hjust = 0.5))
# Apply the theme_bw() and print the plot
print(cp + theme_bw())
# Assuming 'data' is your actual data frame
data_xts <- xts(data[, -1], order.by = data$timestamp)
## Required libraries are loaded
library("anytime")
library("xts")
library("ggfortify")
library("quantmod")
library("forecast")
# Assuming 'data' is your actual data frame
data_xts <- xts(data[, -1], order.by = data$timestamp)
data_ts <- ts(data_xts[, 4], frequency = 7000, start = c(2016, 4, 27))
# Checking for trends and seasonality
dects2 <- decompose(data_ts)  # Obtaining the trends and seasonality
ap <- autoplot(dects2)
ap + theme_bw()
############# Checking for the TRENDS, Seasonality and Residuals #############
#############  Decompose the data to identify any such characteristics: #############
# Assuming 'hourly_data' is your hourly data frame with a timestamp column
hourly_xts <- xts(data[, -1], order.by = data$timestamp)
hourly_ts <- ts(hourly_xts[, 1], frequency = 7000)
dects <- decompose(hourly_ts)
ap <- autoplot(dects)
ap + theme_bw() + labs(title = "Hourly Data Decomposition")
# Additional: You can also plot each component separately
autoplot(dects$seasonal) + theme_bw() + labs(title = "Seasonal Component")
autoplot(dects$trend) + theme_bw() + labs(title = "Trend Component")
autoplot(dects$random) + theme_bw() + labs(title = "Residuals")
############# Dickey-Fuller Hypothesis test #############
############# To check whether the data is stationary or not #############
# Create the time series object
closingFigures <- xts(data$close, order.by = data$timestamp)
# Install and load the necessary library
library(tseries)
# Perform Dickey-Fuller test
result <- adf.test(closingFigures, alternative = 'stationary')
# Print the test results
print(result)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 2)
closing_diff <- closing_diff[!is.na(closing_diff)]
acf(closing_diff)
pacf(closing_diff)
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
model_frame <- as.data.frame(forecast(model, h = 10))
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,2]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,3]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
print(comparison[,2])
print(comparison[,3])
print(comparison[,1])
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
model_frame <- as.data.frame(forecast(model, h = 10))
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot(comparison, aes(x = timestamp)) +
geom_line(aes(y = actual, color = "Actual"), size = 1) +
geom_line(aes(y = forecast, color = "Forecast"), size = 1, linetype = "dashed") +
labs(title = "Forecast vs Actual Price", y = "Closing Price ($)", x = "Date") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red")) +
theme_minimal()
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot() + geom_line(data = comparison, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
plot(forecast(model))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model))+labs(y = "timestamp")
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%d %b %y')
#print(comparison[,1])
print(model_frame)
#print(comparison[,1])
print(model_frame[,1])
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model))+labs(y = "timestamp")
ggplot() + geom_line(data = model_frame, aes(data$timestamp, model_frame[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%Y %m %d')
testdata <- data[, 5]
model <- arima(closingFigures, order = c(1,2,9))
forecast_values <- forecast(model, h = 10)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model))
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 2)
closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closingFigures, alternative = 'stationary')
print(result2)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 2)
#closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closing_diff, alternative = 'stationary')
print(result2)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 1)
#closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closing_diff, alternative = 'stationary')
print(result2)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 1)
#closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closing_diff, alternative = 'stationary')
print(result2)
############# Dickey-Fuller Hypothesis test #############
############# To check whether the data is stationary or not #############
# Create the time series object
closingFigures <- xts(data$close, order.by = data$timestamp)
# Install and load the necessary library
library(tseries)
# Perform Dickey-Fuller test
result <- adf.test(closingFigures, alternative = 'stationary')
# Print the test results
print(result)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 1)
#closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closing_diff, alternative = 'stationary')
print(result2)
acf(closing_diff)
pacf(closing_diff)
Acf(closing_diff)
pacf(closing_diff)
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
print(model)
#forecast_values <- forecast(model, h = 10)
#model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
#autoplot(forecast(model))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
print(model)
forecast(model,h=24)
#forecast_values <- forecast(model, h = 10)
#model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
#autoplot(forecast(model))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
print(model)
forecast(model,h=24)
autoplot(forecast(model,h=24))
#forecast_values <- forecast(model, h = 10)
#model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
#autoplot(forecast(model))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
print(model)
forecast(model,h=24)
autoplot(forecast(model,h=24*90))
#forecast_values <- forecast(model, h = 10)
#model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
#autoplot(forecast(model))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
print(model)
forecast(model,h=24*90)
autoplot(forecast(model,h=24*90))
#forecast_values <- forecast(model, h = 10)
#model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
#comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
#autoplot(forecast(model))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))
ggplot() + geom_line(data = model_frame, aes(data$timestamp, comparison[,1]), color = "a") + geom_line(data = comparison, aes(data$timestamp, comparison[,2]), color = "b") + labs(title="Forecast vs Actual Price")+ ylab("Closing Price ($)") + xlab("Date") + scale_x_date(date_labels = '%Y %m %d')
print(model_frame)
print(model_frame[,1])
print(model_frame)
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
#model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))
print(model_frame)
testdata <- data[, 5]
model <- arima(closingFigures, order = c(3,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
testdata <- data[, 5]
model <- arima(closingFigures, order = c(4,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
# Assuming 'data' is your actual data frame
data_xts <- xts(data[, -1], order.by = data$timestamp)
data_ts <- ts(data_xts[, 4], frequency = 24, start = c(2016, 4, 27))
# Checking for trends and seasonality
dects2 <- decompose(data_ts)  # Obtaining the trends and seasonality
ap <- autoplot(dects2)
ap + theme_bw()
# Assuming 'data' is your actual data frame
data_xts <- xts(data[, -1], order.by = data$timestamp)
data_ts <- ts(data_xts[, 4], frequency = 24*365, start = c(2016, 4, 27))
# Checking for trends and seasonality
dects2 <- decompose(data_ts)  # Obtaining the trends and seasonality
ap <- autoplot(dects2)
ap + theme_bw()
############# Checking for the TRENDS, Seasonality and Residuals #############
#############  Decompose the data to identify any such characteristics: #############
# Assuming 'hourly_data' is your hourly data frame with a timestamp column
hourly_xts <- xts(data[, -1], order.by = data$timestamp)
hourly_ts <- ts(hourly_xts[, 1], frequency = 24*365)
dects <- decompose(hourly_ts)
ap <- autoplot(dects)
ap + theme_bw() + labs(title = "Hourly Data Decomposition")
# Additional: You can also plot each component separately
autoplot(dects$seasonal) + theme_bw() + labs(title = "Seasonal Component")
autoplot(dects$trend) + theme_bw() + labs(title = "Trend Component")
autoplot(dects$random) + theme_bw() + labs(title = "Residuals")
############# Dickey-Fuller Hypothesis test #############
############# To check whether the data is stationary or not #############
# Create the time series object
closingFigures <- xts(data$close, order.by = data$timestamp)
# Install and load the necessary library
library(tseries)
# Perform Dickey-Fuller test
result <- adf.test(closingFigures, alternative = 'stationary')
# Print the test results
print(result)
## Since p-value >0.05 : failed to  reject null hypothesis .Hence data is non stationary
############# Making the data Stationary #############
############# Differenceing method #############
closing_diff <- diff(data$close, differences= 1)
#closing_diff <- closing_diff[!is.na(closing_diff)]
# Perform Dickey-Fuller test
result2 <- adf.test(closing_diff, alternative = 'stationary')
print(result2)
Acf(closing_diff)
pacf(closing_diff)
testdata <- data[, 5]
model <- arima(closingFigures, order = c(4,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
plot(1:100, closingFigures, xlim = c(0, 120), ylim=c(80, 330))
testdata <- data[, 5]
model <- arima(closingFigures, order = c(4,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
lines(forecast_values$mean, col ="pink")
testdata <- data[, 5]
model <- arima(closingFigures, order = c(24,1,4))
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
#lines(forecast_values$, col ="pink")
testdata <- data[, 5]
#model <- arima(closingFigures, order = c(4,1,4))
model <- auto.arima(closingFigures,seasonal = TRUE)
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
#lines(forecast_values$, col ="pink")
testdata <- data[, 5]
#model <- arima(closingFigures, order = c(4,1,4))
model <- auto.arima(closingFigures,seasonal = FALSE)
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90)
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
#lines(forecast_values$, col ="pink")
testdata <- data[, 5]
#model <- arima(closingFigures, order = c(4,1,4))
model <- auto.arima(closingFigures)
#print(model)
#forecast(model,h=24*90)
#autoplot(forecast(model,h=24*90))
forecast_values <- forecast(model, h = 24*90,level = c(80,99))
model_frame <- as.data.frame(forecast_values)
model_frame.index.name = 'index'
#names(model_frame)[1] <- 'index'
#comparison <- data.frame(timestamp = data$timestamp, actual = testdata, forecast = c(testdata[length(testdata)], model_frame[, 1]))
comparison <- cbind(testdata, model_frame[,1])
#data$timestamp <- as.Date(data$timestamp)
autoplot(forecast(model, h = 24*90))+labs(y="Closing Price")
#lines(forecast_values$, col ="pink")
